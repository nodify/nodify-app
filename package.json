{
  "name": "nodify-app",
  "description": "Simple framework for connect.js & express.js apps",
  "maintainers": [
    {
      "name": "Meadhbh Hamrick",
      "email": "meadhbh@smithee.us",
      "url": "http://www.nodify.us/"
    }
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/nodify/nodify-app/raw/master/LICENSE"
    }
  ],
  "repositories": [
    {
      "type": "git",
      "url": "https://github.com/nodify/nodify-app"
    }
  ],
  "dependencies": {
    "node-props": "*"
  },
  "bin": {
    "nodify-app": "./bin/nodify-app"
  },
  "directories": [
    "examples",
    "bin"
  ],
  "version": "0.1.4",
  "main": "nodify-app",
  "keywords": [
    "app",
    "framework",
    "glue"
  ],
  "readme": "nodify-app\n==========\n\nSimple app framework for Node.JS apps.\n\n# Introduction\n\nnodify-app uses the node-props package\nto read global properties for a node app. It then initializes various services\nbased on the props file contents.\n\nThe objective is to move the initialization of services from code to a\ndeclarative properties file so an application's config state can be easily\nstored in a file or http resource.\n\nThe benefits include:\n1. Moving app configuration information from environment variables into JSON\n   files.\n1. Many configuration changes (moving from connect to express, changing database\n   references, including various packages) require changing a config file, not\n   a code change.\n\n# Usage (Simple)\n\nThe simplest way to use nodify-app is to use the 'nodify-app' command, passing\nit the name of one or more configuration files:\n\n<pre>nodify-app --config file://production.json</pre>\n\nThis usage uses the node-props package to read the configuration file\n(\"production.json\" in this case) and start a node service based on the contents\nof the config file.\n\nHere's a very simple configuration file:\n\n<pre>{\n  \"favicon\": \"static/favicon.ico\",\n  \"access\": {\n    \"path\": \"logs/sample_access.csv\",\n    \"format\": \"\\\":date\\\",\\\":req[x-forwarded-for]\\\",\\\":method\\\",\\\":status\\\",\\\":req[host]\\\",\\\":url\\\",\\\":referrer\\\",\\\":user-agent\\\"\"\n  },\n  \"static\": {\n    \"path\": \"static\",\n    \"maxAge\": 14400000\n  },\n  \"listen\": {\n    \"port\": 8080\n  }\n}</pre>\n\nThis config file would start a connect.js server, calling use() with parameters\nappropriate to:\n\n* setup a static file store in the 'static' directory\n* open an access log in the file 'logs/sample_access.csv'\n* use favicon.ico as the site's icon\n* and finally, listen on port 8080 on all interfaces.\n\nA complete guide to nodify-app config file parameters are provided below.\n\n# Usage (More Complex)\n\nThe nodify-app package includes a \"plain 'ol package\" you can use in your own\ncode in case you want to extend it or grab the config file from somewhere other\nthan the command line.\n\nHere's an example of it's use:\n\n<pre>var app = require( 'nodify-app' );\nvar props = require( 'node-props' );\n\nconsole.log( \"Reading configuration file(s).\" );\n\nprops.read( function ( g ) {\n  console.log( \"Initializing application.\" );\n  var server = ( new app( g ) ).init( function ( err ) {\n    if( err ) {\n      throw err;\n    }\n    console.log( \"Listening on port \" + g.listen.port );\n    server.listen();\n  } );\n} );</pre>\n\nThere are really only three public methods for nodify-app: the constructor,\ninit() and listen().\n\n* new app() - You create a new application instance in the traditional manner\nby calling it's constructor, passing the configuration object (described below)\nas a parameter.\n* init() - This method parses config object, creating appropriate instances\nof objects and calling use() when needed. It does just about everything you\nneed to do save calling the listen() method. Keep in mind this can involve I/O,\nso you need to provide a callback function to be executed after initialization.\n* listen() - This method calls the listen() method on all servers defined in\nthe config object.\n\n# Config File / Object Reference\n\n## Basic Configuration Properties\n\n*engine* - \"connect\" or \"express\"\n\nnodify-app can use either connect.js or express.js as a base to build a server.\nBy default, connect is used.\n\n*bodyParser* - true\n\nIf the bodyParser property is present in the configuration option and is set\nto a non-false value (like the boolean true value), the connect.js bodyParser\nmiddleware will be used.\n\n*cookieParser* - true or string\n\nIf the cookieParser property is present and set to a non-false value, the\ncookieParser middleware will be used. If the property's value is a string,\nit will be passed to the connect.cookieParser() call as the \"optional secret\nstring\" parameter.\n\n*favicon* - string\n\nThis property tells nodify-app to use the connect.favicon() middleware. It's\nplaced before the access middleware, so favicon requests will not appear in \nthe access log.\n\n*static* - string or object\n\nIf this property is present, it is either that name of a directory containing\nstatic files to serve up. Or it is an object passed to the connect.static()\nmiddleware.\n\n*errorHandler* - object\n\nIf present, it is passed to the connect.errorHandler() middleware.\n\n*listen* - object\n\nThis object contains the port and host properties which are used to determine\nthe port and IP address to listen on.\n\nHere's an example of an extremely basic configuration that uses connect.js to\nlistens on port 8080, serving files out of a directory called \"public\":\n\n<pre>{\n  \"static\": \"public\",\n  \"listen\": {\n    port: 8080\n  }\n}</pre>\n\n## Express.js properties\n\nThese config properties are useful only when using express.js as your engine.\n\n*views* - object\n\nThis property contains an object with \"path\" and \"engine\" properties. The\npath proerty describes where the view templates will be located while the\nengine property identifies which engine (\"hbs\", \"jade\", etc.) to use.\n\n*router* - true\n\nIf this property is present, it causes the express router middleware to be\nused. This is the equivalent of calling <code>app.use( app.router );</code>.\n\n## nodify-app properties\n\nThese properties are used to configure nodify-app's \"advanced\" features:\n\n*persist* - object\n\nIf present, the nodify-persist package will be required and this property,\nwhich describes database options will be passed to it's constructor.\n\n*logger* - object\n\nIf present, causes the nodify-logger package to be required. This property\nwill be passed to the nodify-logger constructor.\n\n*access* - object\n\nIf present, it creates an instance of the connect.js logger() object using\nthe \"format\" property. If the path property is present, a file stream will\nbe opened and passed to the logger() constructor.\n\n*templates* - string\n\nThis property is the path to the templates directory. If present, the system\nwill scan the directory for HTML fragments, and making them available to\nweb clients as '/templates.json'. It is intended to be an easy way to deliver\na large number of HTML templates in one request.\n\n*source* - string or object\n\nIf present, the file (or files) referenced will be required and called passing\nthe facilities object and the application's defaults.\n\n*apps* - object\n\nTo start multiple servers listening on different ports, include an apps property\nwhose value is an object whose properties are app descriptors.\n\n*start* - object\n\nBy default nodify-app starts all servers described in the apps section. If this\narray of strings is present, only those servers listed here will be started.\n\nHere's an example:\n\n<pre>{\n  \"persist\": {\n    \"log\": {\n      \"level\": 1\n    },\n    \"providers\": {\n      \"localdb\": {\n        \"host\": \"localhost\",\n        \"database\": \"testing\",\n        \"user\": \"testuser\",\n        \"password\": \"as if i would list a password here\"\n      },\n      \"collections\": {\n        \"identity\": \"collection_identity\",\n        \"session\": \"collection_session\"\n      }\n    }\n  },\n  \"logger\": {\n    \"facility\": \"EXAMPLE\",\n    \"messages_path\": \"example_messages.json\"\n  },\n  \"start\": [ \"main\" ],\n  \"apps\": {\n    \"main\": {\n      \"template\": {\n        \"path\": \"templates\"\n      },\n      \"access\": {\n        \"path\": \"logs/main_access.csv\",\n        \"format\": \"\\\":date\\\",\\\":req[x-forwarded-for]\\\",\\\":method\\\",\\\":status\\\",\\\":req[host]\\\",\\\":url\\\",\\\":referrer\\\",\\\":user-agent\\\"\"\n      },\n      \"static\": {\n        \"path\": \"static\",\n        \"maxAge\": 14400000\n      },\n      \"listen\": {\n        \"port\": 8080\n      }\n    },\n    \"admin\": {\n      \"template\": {\n        \"path\": \"admin/templates\"\n      },\n      \"access\": {\n        \"path\": \"logs/admin_access.csv\",\n        \"format\": \"\\\":date\\\",\\\":req[x-forwarded-for]\\\",\\\":method\\\",\\\":status\\\",\\\":req[host]\\\",\\\":url\\\",\\\":referrer\\\",\\\":user-agent\\\"\"\n      },\n      \"static\": {\n        \"path\": \"admin/static\",\n        \"maxAge\": 14400000\n      },\n      \"source\": \"src/logic_admin\",\n      \"listen\": {\n        \"port\": 8085\n      }\n    }\n  }\n}</pre>",
  "_id": "nodify-app@0.1.3",
  "dist": {
    "shasum": "2d7dbafc19a49c6ba2bddc0de95103a8380b8b55"
  },
  "_from": "nodify-app"
}
